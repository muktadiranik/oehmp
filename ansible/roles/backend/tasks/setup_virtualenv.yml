---
- name: Install virtualenv
  become: false
  pip:
      name: virtualenv
      version: latest
  tags: packages

- name: Check if Supervisor exists
  stat: path=/etc/init.d/supervisor
  register: supervisor_status
  when: recreate_virtualenv

- name: Ensure all processes managed by Supervisor are stopped if exists
  command: supervisorctl stop all
  when: recreate_virtualenv and supervisor_status.stat.exists

- name: Ensure no existing virtualenv exists
  file:
      state: absent
      path: "{{ virtualenv_path }}/"
  when: recreate_virtualenv

- name: Create the virtualenv
  become: false
  command: virtualenv -p {{ virtualenv_python_version }} {{ virtualenv_path }}
      creates={{ virtualenv_path }}/bin/activate

- name: Ensure gunicorn and daphne is installed in the virtualenv
  become: false
  pip:
      virtualenv: "{{ virtualenv_path }}"
      name:
          - gunicorn
          - daphne
          - celery

- name: Create the Gunicorn script file
  become: false
  template: src=gunicorn.j2
      dest={{ virtualenv_path }}/bin/gunicorn_start
      owner={{ ansible_user }}
      group=www-data
      mode=0755
      backup=yes
  tags: deploy

- name: Create the Daphne script file
  become: false
  template: src=daphne.j2
      dest={{ virtualenv_path }}/bin/daphne_start
      owner={{ ansible_user }}
      group=www-data
      mode=0755
      backup=yes
  tags: deploy

- name: Create the Celery script file
  become: false
  template: src=celery.j2
      dest={{ virtualenv_path }}/bin/celery_start
      owner={{ ansible_user }}
      group=www-data
      mode=0755
      backup=yes
  tags: deploy

- name: Create the Celery beat script file
  become: false
  template: src=celerybeat.j2
      dest={{ virtualenv_path }}/bin/celerybeat_start
      owner={{ ansible_user }}
      group=www-data
      mode=0755
      backup=yes
  tags: deploy

- name: Create the application log folder
  file: path={{ application_log_dir }}
      owner={{ ansible_user }}
      group=www-data
      mode=0774
      state=directory

- name: Check for an existing gunicorn logfile
  stat:
      path: "{{ application_log_file1 }}"
  register: p1

- name: Check for an existing daphne logfile
  stat:
      path: "{{ application_log_file2 }}"
  register: p2

- name: Check for an existing celery logfile
  stat:
      path: "{{ application_log_file3 }}"
  register: p3

- name: Check for an existing celery beat logfile
  stat:
      path: "{{ application_log_file4 }}"
  register: p4

- name: Create (or retain) the gunicorn log file
  file:
      path: "{{ application_log_file1 }}"
      owner: "{{ ansible_user }}"
      group: "www-data"
      mode: 0664
      state: '{{ "file" if  p1.stat.exists else "touch" }}'

- name: Create (or retain) the daphne log file
  file:
      path: "{{ application_log_file2 }}"
      owner: "{{ ansible_user }}"
      group: "www-data"
      mode: 0664
      state: '{{ "file" if  p2.stat.exists else "touch" }}'

- name: Create (or retain) the celery log file
  file:
      path: "{{ application_log_file3 }}"
      owner: "{{ ansible_user }}"
      group: "www-data"
      mode: 0664
      state: '{{ "file" if  p3.stat.exists else "touch" }}'

- name: Create (or retain) the celery beat log file
  file:
      path: "{{ application_log_file4 }}"
      owner: "{{ ansible_user }}"
      group: "www-data"
      mode: 0664
      state: '{{ "file" if  p4.stat.exists else "touch" }}'

- name: Create the virtualenv postactivate script to set environment variables
  template: src=virtualenv_postactivate.j2
      dest={{ virtualenv_path }}/bin/postactivate
      owner={{ ansible_user }}
      group=www-data
      mode=0640
      backup=yes
  notify:
    - restart gunicorn
    - restart daphne
    - restart celery
    - restart celerybeat
  tags: deploy

- name: Create the maintenance page
  become: false
  template: src=maintenance_off.html
      dest={{ virtualenv_path }}/maintenance_off.html
      mode=0664
